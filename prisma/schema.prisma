// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  username       String?
  email          String? @unique
  hashedPassword String?
  phoneNumber    String?

  role Role @default(CUSTOMER)
  panned Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile[]
  Session Session[]
  vendor  Vendor?
}

model Profile {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  profileImage String?

  isSelected      Boolean @default(false)
  isHolderAccount Boolean @default(false)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clothingShoesPreferences ClothingShoesPreferences?
  Review                   Review[]
  Order                    Order[]
  Whislist                 Whislist[]
  Interests                Interests?
}

model Vendor {
  id     String @id @default(auto()) @map("_id") @db.ObjectId // Use String as the type for MongoDB ObjectId
  userId String @unique @db.ObjectId

  businessName              String
  companyRegistrationNumber String
  country                   String
  city                      String
  state                     String
  addressLine1              String

  fullName    String
  username    String @unique
  email       String
  phoneNumber String

  storeLogo        String
  storeName        String
  storeDescription String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Products Products[]
}

model ClothingShoesPreferences {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  gender String?
  height String?
  weight String?
  age    String?

  profileId String  @unique @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id])
}

model Interests {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  interest String[]

  profileId String  @unique @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id])
}

model Products {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  vendorId String @db.ObjectId

  name        String
  price       Float
  description String
  details     String
  brand       String
  category    String
  inStock     Boolean
  sizes       String[]
  discount    Float?

  vendor  Vendor   @relation(fields: [vendorId], references: [id])
  images  Image[]
  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  profileId String @db.ObjectId
  productId String @db.ObjectId

  rating  Int
  comment String

  profile Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  product Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, profileId])
}

model Whislist {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  profileId String            @db.ObjectId
  products  ProductWishlist[]

  profile Profile @relation(fields: [profileId], references: [id])
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  amount         Float
  deliveryStatus Boolean
  paymentStatus  String?     @default("open")
  products       orderType[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model StripeCustomer {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique

  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

type orderType {
  productId          String
  name               String
  quantity           Int
  selectedImage      Image
  category           String
  vendorId           String
  priceAfterDiscount Float
  sizes              String[]
}

type ProductWishlist {
  productId     String
  vendorId      String
  name          String
  price         Float
  selectedImage Image
  description   String
  brand         String
  category      String
  inStock       Boolean
}

type Image {
  color     String
  image     String
  colorCode String
}

enum Role {
  CUSTOMER
  ADMIN
  VENDOR
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB requires _id field
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
